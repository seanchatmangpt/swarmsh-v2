{#- Weaver Forge Template for Rust Attribute Generation -#}
{#- This template generates type-safe attribute constants from semantic conventions -#}
//! Generated attribute constants for {{ params.namespace | upper }} v2 telemetry
//! 
//! This code is generated by OTEL Weaver from semantic conventions.
//! DO NOT EDIT MANUALLY.
//!
//! Generated at: {{ now() }}
//! Target coverage: {{ params.target_coverage }}%

{% for group in ctx.groups | default([]) %}
{% if group.attributes is defined and group.attributes | length > 0 %}
/// {{ group.brief | default(group.id + " attributes") }}
{% if group.note is defined %}
/// 
/// {{ group.note | wordwrap(70) | replace('\n', '\n/// ') }}
{% endif %}
pub mod {{ group.id | replace("swarmsh.", "") | replace(".", "_") }} {
    {% for attr in group.attributes %}
    {% if attr.brief is defined %}
    /// {{ attr.brief }}
    {% endif %}
    {% if attr.note is defined %}
    /// 
    /// {{ attr.note | wordwrap(70) | replace('\n', '\n/// ') }}
    {% endif %}
    {% if attr.stability is defined %}
    /// Stability: {{ attr.stability }}
    {% endif %}
    pub const {{ attr.id | replace(group.id + ".", "") | upper | replace(".", "_") }}: &str = "{{ attr.id }}";
    {% endfor %}
}

{% endif %}
{% endfor %}

/// AI-specific attributes for Ollama integration
pub mod ai {
    pub const DECISION_TYPE: &str = "swarmsh.ai.decision_type";
    pub const CONFIDENCE: &str = "swarmsh.ai.confidence";
    pub const MODEL_NAME: &str = "swarmsh.ai.model_name";
    pub const PROVIDER: &str = "swarmsh.ai.provider";
    pub const STREAMING: &str = "swarmsh.ai.streaming";
    pub const EMBEDDINGS_DIMENSION: &str = "swarmsh.ai.embeddings_dimension";
    pub const PATTERN_SIMILARITY: &str = "swarmsh.ai.pattern_similarity";
    pub const OPTIMIZATION_TYPE: &str = "swarmsh.ai.optimization_type";
}

/// Common attributes used across all telemetry
pub mod common {
    pub const SERVICE_NAME: &str = "service.name";
    pub const SERVICE_VERSION: &str = "service.version";
    pub const DEPLOYMENT_ENVIRONMENT: &str = "deployment.environment";
    pub const TELEMETRY_MODE: &str = "telemetry.mode";
    pub const PRECISION: &str = "swarmsh.precision";
    pub const CONFLICT_RESOLUTION: &str = "swarmsh.conflict_resolution";
}

/// Helper functions for attribute usage
pub mod helpers {
    use opentelemetry::KeyValue;
    
    /// Create a nanosecond precision timestamp attribute
    pub fn nano_timestamp() -> KeyValue {
        KeyValue::new(
            crate::generated::attributes::common::PRECISION,
            std::time::SystemTime::now()
                .duration_since(std::time::UNIX_EPOCH)
                .unwrap()
                .as_nanos() as i64
        )
    }
    
    /// Create coordination pattern attribute
    pub fn coordination_pattern(pattern: &str) -> KeyValue {
        KeyValue::new(
            crate::generated::attributes::coordination::PATTERN,
            pattern.to_string()
        )
    }
    
    /// Create AI confidence attribute
    pub fn ai_confidence(confidence: f64) -> KeyValue {
        KeyValue::new(
            crate::generated::attributes::ai::CONFIDENCE,
            confidence
        )
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_attribute_constants() {
        // Verify key attributes exist and have correct format
        {% for group in ctx.groups | default([]) %}
        {% if group.attributes is defined and group.attributes | length > 0 %}
        {% for attr in group.attributes %}
        assert!({{ group.id | replace("swarmsh.", "") | replace(".", "_") }}::{{ attr.id | replace(group.id + ".", "") | upper | replace(".", "_") }}.starts_with("{{ group.id }}"));
        {% endfor %}
        {% endif %}
        {% endfor %}
    }
    
    #[test]
    fn test_helper_functions() {
        let ts = helpers::nano_timestamp();
        assert_eq!(ts.key.as_str(), common::PRECISION);
        
        let pattern = helpers::coordination_pattern("scrum_at_scale");
        assert_eq!(pattern.value.as_str(), "scrum_at_scale");
    }
}