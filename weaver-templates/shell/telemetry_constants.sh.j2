#!/bin/bash
{#- Weaver Forge Template for Shell Telemetry Constants -#}
{#- Generates shell-compatible telemetry constants from semantic conventions -#}
# Generated Shell Telemetry Constants for {{ params.namespace | upper }} v2
# DO NOT EDIT - Generated by OTEL Weaver
# Generated at: {{ now() }}
# Zero-conflict coordination with nanosecond precision

# SwarmSH Telemetry Constants
# ==========================

{% for group in ctx.groups | default([]) %}
{% if group.attributes is defined and group.attributes | length > 0 %}
# {{ group.brief | default(group.id + " constants") }}
{% for attr in group.attributes %}
export {{ attr.id | upper | replace(".", "_") }}="{{ attr.id }}"
{% endfor %}

{% endif %}
{% endfor %}

# AI Integration Constants
export SWARMSH_AI_DECISION_TYPE="swarmsh.ai.decision_type"
export SWARMSH_AI_CONFIDENCE="swarmsh.ai.confidence"
export SWARMSH_AI_MODEL_NAME="swarmsh.ai.model_name"
export SWARMSH_AI_PROVIDER="swarmsh.ai.provider"

# Common Service Constants
export SERVICE_NAME="service.name"
export SERVICE_VERSION="service.version"
export DEPLOYMENT_ENVIRONMENT="deployment.environment"
export TELEMETRY_MODE="telemetry.mode"

# Coordination Patterns
declare -a COORDINATION_PATTERNS=(
    "scrum_at_scale"
    "roberts_rules"
    "realtime"
    "atomic"
)

# Helper Functions
# ===============

# Generate nanosecond precision ID
nano_id() {
    local prefix="${1:-item}"
    echo "${prefix}_$(date +%s%N)"
}

# Create OTEL attribute in shell format
otel_attr() {
    local key="$1"
    local value="$2"
    echo "\"${key}=${value}\""
}

# Create coordination span attributes
coordination_span_attrs() {
    local pattern="$1"
    local epoch="$2"
    echo "$(otel_attr "$SWARMSH_COORDINATION_PATTERN" "$pattern") $(otel_attr "$SWARMSH_COORDINATION_EPOCH" "$epoch")"
}

# Export telemetry in OTEL format
export_telemetry() {
    local span_name="$1"
    shift
    local attrs="$@"
    
    # Simple JSON output for lightweight telemetry
    cat << EOF
{
  "span_name": "$span_name",
  "timestamp": $(date +%s%N),
  "attributes": {
    $attrs
  }
}
EOF
}

# Validate coordination pattern
is_valid_pattern() {
    local pattern="$1"
    for p in "${COORDINATION_PATTERNS[@]}"; do
        [[ "$p" == "$pattern" ]] && return 0
    done
    return 1
}

# Print all constants (for debugging)
print_all_constants() {
    echo "SwarmSH Telemetry Constants:"
    env | grep "^SWARMSH_" | sort
}

# Usage example:
# source telemetry_constants.sh
# export_telemetry "agent.register" "$(otel_attr "$SWARMSH_AGENT_ID" "$(nano_id agent)")"