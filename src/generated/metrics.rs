//! Generated metrics for SwarmSH v2 telemetry
//! 
//! This code is generated by OTEL Weaver from semantic conventions.
//! DO NOT EDIT MANUALLY.

use std::collections::HashMap;

/// Worktree metrics
pub struct WorktreeMetrics {
    pub service_name: String,
}

impl WorktreeMetrics {
    pub fn new(service_name: String) -> Self {
        Self { service_name }
    }

    /// Increment worktree operations counter
    pub fn increment_operations(&self, operation_type: &str) {
        metrics::counter!(
            "swarmsh_worktree_operations_total",
            1,
            "operation_type" => operation_type.to_string(),
            "service" => self.service_name.clone()
        );
    }

    /// Record worktree operation duration
    pub fn record_operations_duration(&self, duration_ms: f64, operation_type: &str) {
        metrics::histogram!(
            "swarmsh_worktree_operations_duration_ms",
            duration_ms,
            "operation_type" => operation_type.to_string(),
            "service" => self.service_name.clone()
        );
    }

    /// Set worktree disk usage
    pub fn set_disk_usage(&self, usage_mb: f64, worktree_id: &str) {
        metrics::gauge!(
            "swarmsh_worktree_disk_usage_mb",
            usage_mb,
            "worktree_id" => worktree_id.to_string(),
            "service" => self.service_name.clone()
        );
    }

    /// Record coordination latency
    pub fn record_coordination_latency(&self, latency_ms: f64, coordination_type: &str) {
        metrics::histogram!(
            "swarmsh_worktree_coordination_latency_ms",
            latency_ms,
            "coordination_type" => coordination_type.to_string(),
            "service" => self.service_name.clone()
        );
    }
}

/// Agent metrics
pub struct AgentMetrics {
    pub service_name: String,
}

impl AgentMetrics {
    pub fn new(service_name: String) -> Self {
        Self { service_name }
    }

    /// Increment agent registrations counter
    pub fn increment_registrations(&self, agent_id: &str, agent_type: &str) {
        metrics::counter!(
            "swarmsh_agent_registrations_total",
            1,
            "agent_id" => agent_id.to_string(),
            "agent_type" => agent_type.to_string(),
            "service" => self.service_name.clone()
        );
    }

    /// Increment work completed counter
    pub fn increment_work_completed(&self, agent_id: &str, work_type: &str) {
        metrics::counter!(
            "swarmsh_agent_work_completed_total",
            1,
            "agent_id" => agent_id.to_string(),
            "work_type" => work_type.to_string(),
            "service" => self.service_name.clone()
        );
    }

    /// Increment coordination events counter
    pub fn increment_coordination_events(&self, event_type: &str, agent_id: &str) {
        metrics::counter!(
            "swarmsh_agent_coordination_events_total",
            1,
            "event_type" => event_type.to_string(),
            "agent_id" => agent_id.to_string(),
            "service" => self.service_name.clone()
        );
    }
}

/// Main metrics container
pub struct SwarmMetrics {
    pub worktree: WorktreeMetrics,
    pub agent: AgentMetrics,
}

impl SwarmMetrics {
    pub fn new(service_name: String) -> Self {
        Self {
            worktree: WorktreeMetrics::new(service_name.clone()),
            agent: AgentMetrics::new(service_name),
        }
    }
}

impl Default for SwarmMetrics {
    fn default() -> Self {
        Self::new("swarmsh".to_string())
    }
}
