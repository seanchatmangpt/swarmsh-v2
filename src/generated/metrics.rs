//! Generated metrics for SwarmSH v2 telemetry
//! 
//! This code is generated by OTEL Weaver from semantic conventions.
//! DO NOT EDIT MANUALLY.

use std::marker::PhantomData;

/// Worktree metrics
pub struct WorktreeMetrics {
    _phantom: PhantomData<()>,
}

impl WorktreeMetrics {
    pub fn new() -> Self {
        // Register metric descriptions
        metrics::describe_counter!(
            "swarmsh_worktree_operations_total",
            "Total number of worktree operations"
        );
        metrics::describe_histogram!(
            "swarmsh_worktree_operations_duration_ms",
            "Duration of worktree operations in milliseconds"
        );
        metrics::describe_gauge!(
            "swarmsh_worktree_disk_usage_mb",
            "Current disk usage of worktrees in megabytes"
        );
        metrics::describe_histogram!(
            "swarmsh_worktree_coordination_latency_ms",
            "Latency of worktree coordination operations in milliseconds"
        );
        
        Self {
            _phantom: PhantomData,
        }
    }
    
    pub fn record_operation(&self, operation: &str) {
        metrics::counter!("swarmsh_worktree_operations_total", 1);
    }
    
    pub fn record_operation_duration(&self, operation: &str, duration_ms: f64) {
        metrics::histogram!("swarmsh_worktree_operations_duration_ms", duration_ms);
    }
    
    pub fn set_disk_usage(&self, worktree_name: &str, usage_mb: f64) {
        metrics::gauge!("swarmsh_worktree_disk_usage_mb", usage_mb);
    }
    
    pub fn record_coordination_latency(&self, pattern: &str, latency_ms: f64) {
        metrics::histogram!("swarmsh_worktree_coordination_latency_ms", latency_ms);
    }
}

/// Agent metrics
pub struct AgentMetrics {
    _phantom: PhantomData<()>,
}

impl AgentMetrics {
    pub fn new() -> Self {
        // Register metric descriptions
        metrics::describe_counter!(
            "swarmsh_agent_registrations_total",
            "Total number of agent registrations"
        );
        metrics::describe_counter!(
            "swarmsh_agent_work_completed_total",
            "Total number of work items completed by agents"
        );
        metrics::describe_counter!(
            "swarmsh_agent_coordination_events_total",
            "Total number of agent coordination events"
        );
        
        Self {
            _phantom: PhantomData,
        }
    }
    
    pub fn record_registration(&self, agent_id: &str, role: &str) {
        metrics::counter!("swarmsh_agent_registrations_total", 1);
    }
    
    pub fn record_work_completed(&self, agent_id: &str, work_type: &str) {
        metrics::counter!("swarmsh_agent_work_completed_total", 1);
    }
    
    pub fn record_coordination_event(&self, agent_id: &str, event_type: &str) {
        metrics::counter!("swarmsh_agent_coordination_events_total", 1);
    }
}

/// Combined SwarmSH metrics
pub struct SwarmMetrics {
    pub worktree: WorktreeMetrics,
    pub agent: AgentMetrics,
}

impl SwarmMetrics {
    pub fn new() -> Self {
        Self {
            worktree: WorktreeMetrics::new(),
            agent: AgentMetrics::new(),
        }
    }
}