//! Generated span builders for SwarmSH v2 telemetry
//! 
//! This code is generated by OTEL Weaver from semantic conventions.
//! DO NOT EDIT MANUALLY.

use opentelemetry::{trace::Span, KeyValue};
use tracing::span;

/// Worktree operation span builder
pub struct WorktreeSpanBuilder {
    pub name: String,
    pub operation: String,
    pub coordination_pattern: String,
}

impl WorktreeSpanBuilder {
    pub fn new(name: &str, operation: &str) -> Self {
        Self {
            name: name.to_string(),
            operation: operation.to_string(),
            coordination_pattern: "atomic".to_string(),
        }
    }
    
    pub fn with_coordination_pattern(mut self, pattern: &str) -> Self {
        self.coordination_pattern = pattern.to_string();
        self
    }
    
    pub fn build(self) -> tracing::Span {
        span!(
            tracing::Level::INFO,
            "worktree_operation",
            "swarmsh.worktree.name" = %self.name,
            "swarmsh.worktree.operation" = %self.operation,
            "swarmsh.worktree.coordination_pattern" = %self.coordination_pattern
        )
    }
}

/// Agent coordination span builder
pub struct AgentCoordinationSpanBuilder {
    pub agent_id: String,
    pub coordination_type: String,
}

impl AgentCoordinationSpanBuilder {
    pub fn new(agent_id: &str, coordination_type: &str) -> Self {
        Self {
            agent_id: agent_id.to_string(),
            coordination_type: coordination_type.to_string(),
        }
    }
    
    pub fn build(self) -> tracing::Span {
        span!(
            tracing::Level::INFO,
            "agent_coordination",
            "swarmsh.agent.id" = %self.agent_id,
            "swarmsh.coordination.type" = %self.coordination_type
        )
    }
}

/// Agent lifecycle span builder and function
pub fn agent_lifecycle_span(operation: &str) -> AgentLifecycleSpanBuilder {
    AgentLifecycleSpanBuilder {
        operation: operation.to_string(),
        agent_id: None,
    }
}

pub struct AgentLifecycleSpanBuilder {
    operation: String,
    agent_id: Option<String>,
}

impl AgentLifecycleSpanBuilder {
    pub fn with_agent_id(mut self, agent_id: &str) -> Self {
        self.agent_id = Some(agent_id.to_string());
        self
    }
    
    pub fn start(self) -> tracing::Span {
        span!(
            tracing::Level::INFO,
            "agent_lifecycle",
            "swarmsh.agent.operation" = %self.operation,
            "swarmsh.agent.id" = %self.agent_id.unwrap_or_default()
        )
    }
}

/// Work coordination span builder and function
pub fn work_coordination_span(operation: &str) -> WorkCoordinationSpanBuilder {
    WorkCoordinationSpanBuilder {
        operation: operation.to_string(),
        work_id: None,
    }
}

pub struct WorkCoordinationSpanBuilder {
    operation: String,
    work_id: Option<String>,
}

impl WorkCoordinationSpanBuilder {
    pub fn with_work_id(mut self, work_id: &str) -> Self {
        self.work_id = Some(work_id.to_string());
        self
    }
    
    pub fn start(self) -> tracing::Span {
        span!(
            tracing::Level::INFO,
            "work_coordination",
            "swarmsh.work.operation" = %self.operation,
            "swarmsh.work.id" = %self.work_id.unwrap_or_default()
        )
    }
}

/// Coordination protocol span builder and function
pub fn coordination_protocol_span(operation: &str) -> CoordinationProtocolSpanBuilder {
    CoordinationProtocolSpanBuilder {
        operation: operation.to_string(),
        pattern: None,
    }
}

pub struct CoordinationProtocolSpanBuilder {
    operation: String,
    pattern: Option<String>,
}

impl CoordinationProtocolSpanBuilder {
    pub fn with_pattern(mut self, pattern: &str) -> Self {
        self.pattern = Some(pattern.to_string());
        self
    }
    
    pub fn with_operation(self, _operation: &str) -> Self {
        self // operation already set in constructor
    }
    
    pub fn start(self) -> tracing::Span {
        span!(
            tracing::Level::INFO,
            "coordination_protocol",
            "swarmsh.coordination.operation" = %self.operation,
            "swarmsh.coordination.pattern" = %self.pattern.unwrap_or_default()
        )
    }
}
