//! SwarmSH v2 - Observability-First Agent Coordination System
//! 
//! Revolutionary distributed agent coordination using OpenTelemetry Weaver semantic conventions
//! as primary specifications, with Design for Lean Six Sigma (DLSS) optimization principles.
//! 
//! # Architecture
//! 
//! - **Agent Coordination**: Nanosecond-precision zero-conflict coordination
//! - **Work Distribution**: Pull-based work claiming with atomic guarantees  
//! - **Health Monitoring**: Adaptive monitoring with bottleneck detection
//! - **8020 Analytics**: Pareto principle optimization with waste elimination
//! - **Shell Export**: Complete Rust implementation exported to shell scripts
//! 
//! # CLIAPI Integration
//! 
//! Incorporates all CLIAPI principles:
//! - Machine-first design with JSON by default
//! - YAML specifications for work definition
//! - Infinite agentic loop capabilities
//! - 80/20 optimization principles
//! 
//! # Coordination Patterns
//! 
//! - **Scrum at Scale**: Primary coordination pattern (NOT SAFe)
//! - **Roberts Rules**: Governance and decision making
//! - **Real-time**: High-frequency coordination operations
//! - **Atomic**: File-based locking for conflict prevention

use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::sync::Arc;

// Generated code imports
use crate::generated::{
    span_builders::{agent_lifecycle_span, work_coordination_span, coordination_protocol_span},
    metrics::SwarmMetrics,
};

// Core modules
pub mod coordination;
pub mod telemetry;
pub mod health;
pub mod analytics;
pub mod shell_export;
pub mod ai_integration;
pub mod worktree_manager;
pub mod weaver_forge;
pub mod auto_command;

#[cfg(test)]
pub mod telemetry_test;

// Generated telemetry code (will be generated by OTEL Weaver)
pub mod generated {
    //! Generated telemetry code from semantic conventions
    //! 
    //! This module contains type-safe span builders, attribute constants,
    //! and metric builders generated by OTEL Weaver from the semantic
    //! convention specifications.
    
    // Placeholder until OTEL Weaver generates the actual code
    pub mod span_builders;
    pub mod attributes;
    pub mod metrics;
}

// Core types
pub use coordination::{AgentCoordinator, AgentSpec, WorkQueue, CoordinationPattern};
pub use telemetry::{TelemetryManager, SwarmTelemetry};
pub use health::{HealthMonitor, HealthReport, HealthStatus};
pub use analytics::{AnalyticsEngine, OptimizationReport, ValueStreamAnalysis};
pub use shell_export::{ShellExporter, ExportConfig};
pub use worktree_manager::{WorktreeManager, WorktreeState, WorktreeSpec, WorktreeStatus};

/// Main SwarmSH coordination system
#[derive(Clone)]
pub struct SwarmSystem {
    /// Agent coordination engine
    pub coordinator: Arc<AgentCoordinator>,
    
    /// Work distribution system
    pub work_queue: Arc<WorkQueue>,
    
    /// Health monitoring system
    pub health_monitor: Arc<HealthMonitor>,
    
    /// 8020 analytics engine
    pub analytics: Arc<AnalyticsEngine>,
    
    /// Telemetry management
    pub telemetry: Arc<TelemetryManager>,
    
    /// Shell export capability
    pub shell_exporter: Arc<ShellExporter>,
    
    /// Worktree management system
    pub worktree_manager: Arc<WorktreeManager>,
}

impl SwarmSystem {
    /// Create new SwarmSH system with default configuration
    pub async fn new() -> Result<Self> {
        let telemetry = Arc::new(TelemetryManager::new().await?);
        let work_queue = Arc::new(WorkQueue::new(None).await?);
        let coordinator = Arc::new(AgentCoordinator::new(telemetry.clone(), work_queue.clone()).await?);
        let health_monitor = Arc::new(HealthMonitor::new(telemetry.clone()).await?);
        let analytics = Arc::new(AnalyticsEngine::new(telemetry.clone()).await?);
        let shell_exporter = Arc::new(ShellExporter::new().await?);
        let worktree_manager = Arc::new(
            WorktreeManager::new(
                std::env::current_dir()?.join("worktrees"),
                telemetry.clone()
            ).await?
        );
        
        Ok(Self {
            coordinator,
            work_queue,
            health_monitor,
            analytics,
            telemetry,
            shell_exporter,
            worktree_manager,
        })
    }
    
    /// Start the SwarmSH coordination system
    pub async fn start(&self) -> Result<()> {
        // Initialize all subsystems
        self.telemetry.start().await.context("Failed to start telemetry")?;
        self.coordinator.start().await.context("Failed to start coordinator")?;
        self.health_monitor.start().await.context("Failed to start health monitor")?;
        self.analytics.start().await.context("Failed to start analytics")?;
        
        println!("SwarmSH v2 - Observability-First Agent Coordination System started");
        println!("- Coordination patterns: Scrum at Scale, Roberts Rules, Real-time, Atomic");
        println!("- CLIAPI integration: Machine-first design with YAML specifications");
        println!("- DLSS optimization: 8020 principle with waste elimination");
        println!("- Shell export: Full functionality available as shell scripts");
        
        Ok(())
    }
    
    /// Export system to shell scripts
    pub async fn export_to_shell(&self, config: ExportConfig) -> Result<()> {
        self.shell_exporter.export_system(self, config).await
            .context("Failed to export system to shell scripts")
    }
    
    /// Stop the SwarmSH coordination system
    pub async fn stop(&self) -> Result<()> {
        self.analytics.stop().await.context("Failed to stop analytics")?;
        self.health_monitor.stop().await.context("Failed to stop health monitor")?;
        self.coordinator.stop().await.context("Failed to stop coordinator")?;
        self.telemetry.stop().await.context("Failed to stop telemetry")?;
        
        println!("SwarmSH v2 system stopped");
        Ok(())
    }
    
    /// Get generated SwarmSH metrics
    pub fn metrics(&self) -> Option<SwarmMetrics> {
        // Return metrics from telemetry system
        None // Placeholder - would integrate with telemetry metrics
    }
    
    /// Create weaver-instrumented agent span
    pub fn create_agent_span(&self, agent_id: &str, operation: &str) -> tracing::Span {
        agent_lifecycle_span(operation)
            .with_agent_id(agent_id)
            .start()
    }
    
    /// Create weaver-instrumented work span
    pub fn create_work_span(&self, work_id: &str, operation: &str) -> tracing::Span {
        work_coordination_span(operation)
            .with_work_id(work_id)
            .start()
    }
    
    /// Create weaver-instrumented coordination span
    pub fn create_coordination_span(&self, pattern: &str, operation: &str) -> tracing::Span {
        coordination_protocol_span(operation)
            .with_pattern(pattern)
            .with_operation(operation)
            .start()
    }
}

/// Agent identifier with nanosecond precision
pub type AgentId = String;

/// Work identifier with nanosecond precision  
pub type WorkId = String;

/// Coordination epoch for conflict resolution
#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq, Eq, PartialOrd, Ord)]
pub struct CoordinationEpoch(pub u64);

impl CoordinationEpoch {
    /// Create new coordination epoch
    pub fn new() -> Self {
        let timestamp = std::time::SystemTime::now()
            .duration_since(std::time::UNIX_EPOCH)
            .unwrap()
            .as_secs();
        Self(timestamp)
    }
    
    /// Advance to next epoch
    pub fn advance(&mut self) {
        self.0 += 1;
    }
}

/// Error types for SwarmSH operations
#[derive(Debug, thiserror::Error)]
pub enum SwarmError {
    #[error("Coordination conflict detected")]
    CoordinationConflict,
    
    #[error("Agent not found: {agent_id}")]
    AgentNotFound { agent_id: String },
    
    #[error("Work item not found: {work_id}")]
    WorkNotFound { work_id: String },
    
    #[error("Lock acquisition failed")]
    LockFailed,
    
    #[error("Health check failed: {component}")]
    HealthCheckFailed { component: String },
    
    #[error("Resource already exists: {0}")]
    AlreadyExists(String),
    
    #[error("Telemetry error: {0}")]
    TelemetryError(#[from] opentelemetry::trace::TraceError),
    
    #[error("IO error: {0}")]
    IoError(#[from] std::io::Error),
    
    #[error("Serialization error: {0}")]
    SerializationError(#[from] serde_json::Error),
    
    #[error("Git operation failed: {0}")]
    GitOperation(String),
    
    #[error("Resource not found: {0}")]
    NotFound(String),
    
    #[error("Coordination error: {0}")]
    Coordination(String),
    
    #[error("Other error: {0}")]
    Other(#[from] anyhow::Error),
}

/// Result type for SwarmSH operations
pub type SwarmResult<T> = Result<T, SwarmError>;

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_agent_id_type() {
        let id: AgentId = "test_agent_123".to_string();
        assert!(!id.is_empty());
    }
    
    #[test]
    fn test_work_id_type() {
        let id: WorkId = "test_work_456".to_string();
        assert!(!id.is_empty());
    }
    
    #[test]
    fn test_coordination_epoch() {
        let mut epoch = CoordinationEpoch::new();
        let initial = epoch.0;
        
        epoch.advance();
        assert_eq!(epoch.0, initial + 1);
    }
}
