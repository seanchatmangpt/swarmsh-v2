# SwarmSH v2 - 80/20 Auto Feature Implementation Specification
# This demonstrates how /auto command identifies and implements high-value features

analysis:
  project: "example-web-app"
  scan_patterns:
    - "**/*.rs"
    - "**/*.js"
    - "**/*.py"
    - "**/*.yaml"
  
  # DLSS Value Detection Criteria
  value_metrics:
    user_impact:
      weight: 0.4
      factors:
        - api_endpoint_usage
        - user_flow_frequency
        - error_impact_radius
    
    implementation_cost:
      weight: 0.3
      factors:
        - code_complexity (cyclomatic)
        - dependency_count
        - test_coverage_required
    
    technical_debt:
      weight: 0.2
      factors:
        - code_duplication
        - outdated_dependencies
        - missing_documentation
    
    performance_impact:
      weight: 0.1
      factors:
        - response_time_improvement
        - resource_utilization
        - scalability_enhancement

# Example detected features (auto-generated by analysis)
detected_features:
  - feature_id: "feat_cache_layer"
    name: "Redis Cache Layer"
    impact_score: 0.92
    complexity_score: 0.25
    value_ratio: 3.68  # High value, low complexity
    implementation:
      type: "performance"
      estimated_hours: 4
      test_requirements:
        - unit_tests: true
        - integration_tests: true
        - performance_benchmarks: true
    
  - feature_id: "feat_auth_mfa"
    name: "Multi-Factor Authentication"
    impact_score: 0.88
    complexity_score: 0.35
    value_ratio: 2.51
    implementation:
      type: "security"
      estimated_hours: 8
      dependencies:
        - "auth_provider_sdk"
        - "sms_service"
    
  - feature_id: "feat_api_pagination"
    name: "API Response Pagination"
    impact_score: 0.75
    complexity_score: 0.15
    value_ratio: 5.00  # Highest value ratio
    implementation:
      type: "optimization"
      estimated_hours: 2
      affected_endpoints:
        - "/api/v1/users"
        - "/api/v1/products"
        - "/api/v1/orders"
    
  - feature_id: "feat_error_monitoring"
    name: "Centralized Error Monitoring"
    impact_score: 0.82
    complexity_score: 0.30
    value_ratio: 2.73
    implementation:
      type: "observability"
      estimated_hours: 6
      integrations:
        - "sentry"
        - "datadog"
        - "prometheus"

# Wave execution plan (auto-generated)
wave_plan:
  waves:
    - wave_id: "wave_001"
      priority: "high"
      features:
        - "feat_api_pagination"  # Highest value ratio
        - "feat_cache_layer"     # High impact, low complexity
      parallelism: 2
      
    - wave_id: "wave_002" 
      priority: "medium"
      features:
        - "feat_error_monitoring"
        - "feat_auth_mfa"
      parallelism: 2
      dependencies:
        - "wave_001"  # Must complete first wave

# Quality gates
quality_gates:
  test_coverage:
    minimum: 0.80
    target: 0.95
  
  performance:
    regression_threshold: 0.05  # 5% max degradation
    improvement_target: 0.20    # 20% improvement goal
  
  defect_density:
    maximum: 0.5  # Per KLOC
    target: 0.1
  
  documentation:
    api_coverage: 1.0  # All public APIs documented
    code_comments: 0.3  # 30% comment ratio

# DLSS waste elimination targets
waste_elimination:
  overproduction:
    - avoid_feature_creep
    - implement_only_used_features
  
  waiting:
    - parallel_wave_execution
    - async_validation_pipeline
  
  transport:
    - minimize_data_movement
    - local_caching_strategy
  
  overprocessing:
    - simple_implementations_first
    - avoid_premature_optimization
  
  inventory:
    - just_in_time_feature_delivery
    - minimal_work_in_progress
  
  motion:
    - automated_deployment_pipeline
    - single_command_execution
  
  defects:
    - quality_gates_enforcement
    - automated_rollback_capability

# Expected outcomes
expected_outcomes:
  flow_efficiency:
    baseline: 0.15
    target: 0.84
    
  value_delivery:
    features_per_week: 8
    value_points_per_week: 32
    
  quality_metrics:
    defect_escape_rate: 0.001
    mean_time_to_recovery: "5m"
    
  developer_experience:
    cognitive_load: "reduced"
    automation_level: "high"