[package]
name = "swarmsh-v2"
version = "2.0.0"
edition = "2021"
description = "SwarmSH v2 Revolutionary Platform - Mathematical Zero-Conflict Agent Coordination with Universal Shell Export + CDCS v8.0 Integration"
license = "MIT"
authors = ["SwarmSH Team", "IndyDevDan", "CDCS Contributors"]
homepage = "https://github.com/user/swarmsh-v2"
repository = "https://github.com/user/swarmsh-v2"
keywords = ["coordination", "agents", "telemetry", "shell-export", "cdcs"]
categories = ["development-tools", "command-line-utilities", "science", "simulation"]

[[bin]]
name = "swarmsh-coordinator"
path = "src/bin/coordinator.rs"

[[bin]]
name = "swarmsh-agent"
path = "src/bin/agent.rs"

[[bin]]
name = "swarmsh-exporter"
path = "src/bin/shell_exporter.rs"

[[bin]]
name = "swarmsh-worktree"
path = "src/bin/worktree_manager.rs"

[[bin]]
name = "generate_telemetry"
path = "src/bin/generate_telemetry.rs"

[[bin]]
name = "validate_telemetry"
path = "src/bin/validate_telemetry.rs"

[[bin]]
name = "sprint_demo"
path = "src/bin/sprint_demo.rs"

[[bin]]
name = "generate-cli"
path = "src/bin/generate_cli.rs"

[[bin]]
name = "test-weaver-forge"
path = "src/bin/test_weaver_forge.rs"

[[bin]]
name = "e2e_test_runner"
path = "src/bin/e2e_test_runner.rs"

[[bin]]
name = "test_shell_validators"
path = "src/bin/test_shell_validators.rs"

[[bin]]
name = "full_cycle_demo"
path = "src/bin/full_cycle_demo.rs"

[[bin]]
name = "weaver_complete"
path = "src/bin/weaver_complete.rs"

[[bin]]
name = "cdcs_integration"
path = "src/bin/cdcs_integration.rs"

[[bin]]
name = "v8_platform_status"
path = "src/bin/v8_platform_status.rs"

[[bin]]
name = "revolutionary_metrics"
path = "src/bin/revolutionary_metrics.rs"

[[bin]]
name = "roberts-rules-sim"
path = "src/bin/roberts_rules_simulation.rs"

[[bin]]
name = "swarmsh-automation"
path = "src/bin/swarmsh_automation.rs"

[[bin]]
name = "migration-assessment"
path = "src/bin/migration_assessment.rs"

[[bin]]
name = "otel-validator"
path = "src/bin/otel_validator.rs"

[[bin]]
name = "simple-otel-validator"
path = "src/bin/simple_otel_validator.rs"

[[bin]]
name = "performance-benchmarks"
path = "src/bin/performance_benchmarks.rs"

[dependencies]
# OpenTelemetry Core - Comprehensive OTEL Stack
opentelemetry = "0.23"
opentelemetry_sdk = { version = "0.23", features = ["rt-tokio", "rt-tokio-current-thread"] }
opentelemetry-jaeger = { version = "0.22", optional = true }
opentelemetry-prometheus = { version = "0.16", optional = true }
opentelemetry-otlp = { version = "0.16", optional = true }
opentelemetry-stdout = { version = "0.4", optional = true }
opentelemetry-semantic-conventions = "0.15"
opentelemetry-http = "0.12"

# Tracing Integration - Full OTEL Support
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["json", "env-filter", "chrono"] }
tracing-opentelemetry = "0.24"
tracing-appender = "0.2"
tracing-error = "0.2"
tracing-timing = "0.6"  # Inter-event timing metrics on top of tracing

# Metrics and Monitoring
metrics = "0.21"
metrics-exporter-prometheus = { version = "0.12", optional = true }
metrics-util = "0.15"

# Async Runtime
tokio = { version = "1.0", features = ["full"] }
tokio-stream = { version = "0.1", features = ["fs"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"

# File Operations
fs_extra = "1.3"
file-lock = "2.1"

# HTTP Client for AI Integration
reqwest = { version = "0.11", features = ["json"], optional = true }

# CLI Framework (CLIAPI Principles)
clap = { version = "4.0", features = ["derive"] }

# Shell Export with minijinja templating
# tera = { version = "1.19", optional = true }  # Migrated to minijinja
which = { version = "4.4", optional = true }

# AI Integration
ollama-rs = { version = "0.3.1", optional = true }
async-stream = "0.3"
anyhow = "1.0"
thiserror = "1.0"
futures = "0.3"

# DLSS Analytics
# statistical-analysis = "0.2"  # Will add custom analytics implementation

# Time handling
chrono = { version = "0.4", features = ["serde", "clock"] }
minijinja = "2.10.2"
regex = "1.10"
uuid = { version = "1.9", features = ["v4"] }

# Meta-programming dependencies
paste = "1.0"
proc-macro2 = "1.0"
quote = "1.0"
syn = { version = "2.0", features = ["full"] }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.0"
tokio-test = "0.4"
tokio-stream = "0.1"
futures = "0.3"
tempfile = "3.0"
tracing-test = "0.2"
regex = "1.10"
tracing-subscriber = "0.3"

[[bench]]
name = "worktree_benchmarks"
harness = false

[features]
default = ["jaeger", "prometheus", "otlp", "stdout", "shell-export", "ai-integration", "cdcs-v8"]
jaeger = ["opentelemetry-jaeger"]
prometheus = ["opentelemetry-prometheus", "metrics-exporter-prometheus"]
otlp = ["opentelemetry-otlp"]
stdout = ["opentelemetry-stdout"]
shell-export = ["which"]
ai-integration = ["reqwest", "ollama-rs"]
cdcs-v8 = ["ai-integration", "shell-export"]
revolutionary-platform = ["cdcs-v8", "full-telemetry"]
full-telemetry = ["jaeger", "prometheus", "otlp", "stdout"]
