#!/usr/bin/env rust-script
//! Simple test to verify OTEL traces are actually generated by SwarmSH v2

use std::time::Duration;
use tokio;

async fn test_otel_traces() -> anyhow::Result<()> {
    println!("🔍 Testing OTEL trace generation...");
    
    // Set environment for stdout output
    std::env::set_var("SWARMSH_TELEMETRY_MODE", "lightweight");
    std::env::set_var("OTEL_ENABLE_STDOUT", "true");
    std::env::set_var("RUST_LOG", "debug");
    
    // Initialize SwarmSH system
    let system = swarmsh_v2::SwarmSystem::new().await?;
    
    println!("✅ SwarmSH system initialized");
    
    // Start the system
    system.start().await?;
    
    println!("✅ System started, generating test spans...");
    
    // Create test spans to verify instrumentation
    let agent_span = system.create_agent_span("test_agent_001", "registration");
    let _guard = tracing::subscriber::set_default(tracing_subscriber::fmt::Subscriber::new());
    
    tracing::info!("Testing agent registration with correlation ID");
    
    let work_span = system.create_work_span("test_work_001", "claim");
    tracing::info!("Testing work claiming with performance metrics");
    
    let coord_span = system.create_coordination_span("scrum_at_scale", "sprint_planning");
    tracing::info!("Testing coordination pattern with telemetry");
    
    // Wait a bit for traces to be processed
    tokio::time::sleep(Duration::from_millis(100)).await;
    
    println!("✅ Test spans created and logged");
    
    // Stop the system
    system.stop().await?;
    
    println!("✅ OTEL trace verification complete - check output above for telemetry");
    
    Ok(())
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    test_otel_traces().await
}