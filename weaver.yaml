# Weaver Forge Configuration for SwarmSH v2
# Maximizes code generation from semantic conventions

file_format: 0.1.0
schema_url: https://opentelemetry.io/schemas/1.21.0

# Global parameters available in all templates
params:
  namespace: swarmsh
  rust_module_name: generated
  enable_shell_export: true
  enable_ai_integration: true
  target_coverage: 73
  
  # SwarmSH-specific parameters
  coordination_patterns:
    - scrum_at_scale
    - roberts_rules
    - realtime
    - atomic
  
  # Nanosecond precision configuration
  precision:
    timestamp: nanosecond
    conflict_resolution: mathematical
    
# Template definitions for code generation
templates:
  # Core Rust code generation (highest priority)
  - template: "rust/attributes.j2"
    filter: "."
    application_mode: single
    file_name: "src/generated/attributes.rs"
    
  - template: "rust/span_builders.j2"
    filter: ".groups[] | select(.type == \"span\")"
    application_mode: single
    file_name: "src/generated/span_builders.rs"
    
  - template: "rust/metrics.j2"
    filter: ".groups[] | select(.type == \"metric\")"
    application_mode: single
    file_name: "src/generated/metrics.rs"
    
  - template: "rust/mod.j2"
    filter: "."
    application_mode: single
    file_name: "src/generated/mod.rs"
    
  # Shell export generation (critical for SwarmSH)
  - template: "shell/telemetry_constants.sh.j2"
    filter: "."
    application_mode: single
    file_name: "shell-export/telemetry_constants.sh"
    
  - template: "shell/coordination_helpers.sh.j2"
    filter: ".groups[] | select(.id | startswith(\"swarmsh.coordination\"))"
    application_mode: single
    file_name: "shell-export/coordination_helpers.sh"
    
  # AI integration templates
  - template: "rust/ai_attributes.j2"
    filter: ".groups[] | select(.attributes[]? | select(.id | contains(\"ai\") or contains(\"ollama\")))"
    application_mode: single
    file_name: "src/generated/ai_attributes.rs"
    
  # Documentation generation
  - template: "docs/semantic_conventions.md.j2"
    filter: "."
    application_mode: single
    file_name: "docs/SEMANTIC_CONVENTIONS.md"
    
  # Test generation
  - template: "rust/attribute_tests.j2"
    filter: "."
    application_mode: single
    file_name: "tests/generated_attribute_tests.rs"

# Custom filters and functions available in templates
filters:
  # SwarmSH-specific case conversions
  swarmsh_const: "lambda s: 'SWARMSH_' + s.upper().replace('.', '_')"
  nano_id: "lambda prefix: f'{prefix}_{int(time.time() * 1e9)}'"
  
  # Coordination pattern helpers
  is_coordination_attr: "lambda id: id.startswith('swarmsh.coordination')"
  is_ai_attr: "lambda id: 'ai' in id or 'ollama' in id"
  
# Validation rules
validation:
  # Ensure generated code compiles
  - type: rust_compilation
    command: "cargo check --all-features"
    
  # Validate shell scripts
  - type: shell_validation
    command: "shellcheck shell-export/*.sh"
    
  # Check code coverage target
  - type: coverage_check
    target: 73
    command: "scripts/measure-generation-coverage.sh"