//! Generated CLI subcommands for {{ ctx.id | pascal_case }}
//! Auto-generated by WeaverForge from semantic conventions

use clap::{Args, Subcommand};
use anyhow::Result;
use tracing::{info, instrument};

#[derive(Subcommand)]
pub enum {{ ctx.id | pascal_case }}Commands {
{%- for event in ctx.events %}
    /// {{ event.brief | comment }}
    {{ event.name | pascal_case }} {
{%- for attr in event.attributes | selectattr("requirement_level", "required") %}
        /// {{ attr.brief | comment }}
        #[arg(long)]
        {{ attr.name | snake_case }}: {{ attr.type | rust_type }},
{%- endfor %}
{%- for attr in event.attributes | rejectattr("requirement_level", "required") %}
        /// {{ attr.brief | comment }}
        #[arg(long)]
        {{ attr.name | snake_case }}: Option<{{ attr.type | rust_type }}>,
{%- endfor %}
    },
{%- endfor %}
}

impl {{ ctx.id | pascal_case }}Commands {
    #[instrument]
    pub async fn execute(self) -> Result<()> {
        match self {
{%- for event in ctx.events %}
            {{ ctx.id | pascal_case }}Commands::{{ event.name | pascal_case }} {
{%- for attr in event.attributes %}
                {{ attr.name | snake_case }},
{%- endfor %}
            } => {
                let _span = tracing::info_span!(
                    "{{ event.name }}",
{%- for attr in event.attributes | selectattr("requirement_level", "required") %}
                    {{ attr.name | snake_case }} = %{{ attr.name | snake_case }},
{%- endfor %}
                ).entered();
                
                info!("Executing {{ event.brief | comment }}");
                
                // Implementation for {{ event.name }}
                handle_{{ event.name | snake_case }}(
{%- for attr in event.attributes %}
                    {{ attr.name | snake_case }},
{%- endfor %}
                ).await
            }
{%- endfor %}
        }
    }
}

{%- for event in ctx.events %}

#[instrument]
async fn handle_{{ event.name | snake_case }}(
{%- for attr in event.attributes | selectattr("requirement_level", "required") %}
    {{ attr.name | snake_case }}: {{ attr.type | rust_type }},
{%- endfor %}
{%- for attr in event.attributes | rejectattr("requirement_level", "required") %}
    {{ attr.name | snake_case }}: Option<{{ attr.type | rust_type }}>,
{%- endfor %}
) -> Result<()> {
    info!("Handling {{ event.brief | comment }}");
    
    // TODO: Implement {{ event.name }} operation
    // Use attributes:
{%- for attr in event.attributes %}
    // - {{ attr.name }}: {{ attr.brief | comment }}
{%- endfor %}
    
    Ok(())
}
{%- endfor %}