# SwarmSH v2 Semantic Conventions Reference

> **Auto-generated documentation** from semantic conventions.  
> **DO NOT EDIT MANUALLY** - Generated by OTEL Weaver.
>
> Generated from version: {{ params.semconv_version | default("1.0.0") }}  
> Generation timestamp: {{ params.generation_timestamp | default(now()) }}  
> Target coverage: {{ params.target_coverage | default(90) }}%

## Overview

This document describes the semantic conventions used in SwarmSH v2 for telemetry instrumentation. These conventions ensure consistent attribute naming, metric definitions, and span structures across all SwarmSH components.

### Key Features

- **Zero-Conflict Coordination**: Mathematical precision guarantees
- **Nanosecond Timestamps**: High-precision timing for coordination
- **Shell Export Compatible**: Full functionality without Rust runtime
- **AI Integration Ready**: Claude + Ollama decision making support
- **DLSS Optimized**: 8020 principle waste elimination

## Domains

{% for convention in ctx %}
  {% if convention.groups %}
SwarmSH v2 defines {{ convention.groups | length }} semantic convention groups:

    {% for group in convention.groups %}
### {{ group.id }}

**{{ group.brief }}**

      {% if group.note %}
{{ group.note }}
      {% endif %}

      {% if group.attributes %}
#### Attributes

| Name | Type | Level | Description | Examples |
|------|------|-------|-------------|----------|
        {% for attr in group.attributes %}
| `{{ attr.id }}` | {{ attr.type }} | {{ attr.requirement_level }} | {{ attr.brief }} | {% if attr.examples %}{{ attr.examples | join(", ") }}{% endif %} |
        {% endfor %}

**Required Attributes:** {{ group.attributes | selectattr("requirement_level", "eq", "required") | list | length }}  
**Recommended Attributes:** {{ group.attributes | selectattr("requirement_level", "eq", "recommended") | list | length }}  
**Total Attributes:** {{ group.attributes | length }}
      {% endif %}

      {% if group.metrics %}
#### Metrics

| Name | Type | Description |
|------|------|-------------|
        {% for metric in group.metrics %}
| `{{ metric.id }}` | {{ metric.instrument }} | {{ metric.brief }} |
        {% endfor %}
      {% endif %}

      {% if group.events %}
#### Events

| Name | Severity | Description |
|------|----------|-------------|
        {% for event in group.events %}
| `{{ event.id }}` | {{ event.severity | default("info") }} | {{ event.brief }} |
        {% endfor %}
      {% endif %}

---

    {% endfor %}
  {% endif %}
{% endfor %}

## Coordination Patterns

SwarmSH v2 supports multiple coordination patterns for zero-conflict operations:

{% for pattern in params.coordination_patterns | default([]) %}
### {{ pattern | replace("_", " ") | title }}

Pattern identifier: `{{ pattern }}`

{% endfor %}

## Shell Export Integration

All semantic conventions are automatically exported to shell-compatible formats:

### Generated Files

- `shell-export/telemetry_export.sh` - Core telemetry constants and functions
- `shell-export/span_tracking.sh` - Span lifecycle management
- `shell-export/metric_collection.sh` - Metrics recording and export

### Usage Example

```bash
#!/bin/bash
source shell-export/telemetry_export.sh

# Initialize telemetry
init_telemetry "my-service" "1.0.0"

# Record a span
span_ctx=$(record_worktree_operation "create" "feature-branch" "/path/to/worktree" "feature/new")
# ... do work ...
span_end "$span_ctx" "OK"

# Record metrics  
record_metric "swarmsh.worktree.operations.total" "counter" 1 "operation=create"

# Shutdown
shutdown_telemetry
```

## Type Safety

### Rust Integration

```rust
use swarmsh_v2::generated::*;

// Type-safe span building
let span = SwarmshWorktreeSpanBuilder::new("create_worktree")
    .with_name("feature-branch")
    .with_path("/path/to/worktree") 
    .with_branch("feature/new")
    .with_operation("create")
    .build_tracing()?;

// Metric recording
METRICS.worktree.record_operation("create");

// Event recording
swarmsh_worktree_events::operation_completed("Worktree created successfully")
    .with_worktree_name("feature-branch")
    .record_tracing();
```

### Validation

All attributes are validated according to their semantic convention definitions:

- **Type checking**: String, integer, double, boolean validation
- **Required attributes**: Compilation/runtime errors for missing required attributes  
- **Value constraints**: Pattern matching and enumeration validation
- **Deprecation warnings**: Automatic warnings for deprecated attributes

## AI Integration

### Claude Integration

```rust
use swarmsh_v2::ai_integration::*;

let decision = claude_decision("What coordination pattern should we use?")
    .with_context(&coordination_context)
    .with_semantic_conventions() // Automatically includes telemetry context
    .execute().await?;
```

### Ollama Integration

```rust
use swarmsh_v2::ai_integration::*;

let analysis = ollama_analysis("llama3.2")
    .analyze_telemetry_data(&metrics)
    .with_8020_optimization()
    .execute().await?;
```

## Implementation Statistics

- **Total Attributes**: {% set total_attrs = 0 %}{% for convention in ctx %}{% if convention.groups %}{% for group in convention.groups %}{% set total_attrs = total_attrs + (group.attributes | length) %}{% endfor %}{% endif %}{% endfor %}{{ total_attrs }}
- **Total Metrics**: {% set total_metrics = 0 %}{% for convention in ctx %}{% if convention.groups %}{% for group in convention.groups %}{% if group.metrics %}{% set total_metrics = total_metrics + (group.metrics | length) %}{% endif %}{% endfor %}{% endif %}{% endfor %}{{ total_metrics }}
- **Total Events**: {% set total_events = 0 %}{% for convention in ctx %}{% if convention.groups %}{% for group in convention.groups %}{% if group.events %}{% set total_events = total_events + (group.events | length) %}{% endif %}{% endfor %}{% endif %}{% endfor %}{{ total_events }}
- **Domains**: {% set total_groups = 0 %}{% for convention in ctx %}{% if convention.groups %}{% set total_groups = total_groups + (convention.groups | length) %}{% endif %}{% endfor %}{{ total_groups }}
- **Code Generation Coverage**: {{ params.target_coverage | default(90) }}%

## References

- [OpenTelemetry Semantic Conventions](https://opentelemetry.io/docs/specs/semconv/)
- [SwarmSH v2 Architecture](./ARCHITECTURE.md)
- [Coordination Patterns](./COORDINATION_PATTERNS.md)
- [DLSS Optimization](./DLSS_OPTIMIZATION.md)