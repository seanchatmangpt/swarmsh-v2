//! Generated SDK initialization helpers for SwarmSH v2 telemetry
//! 
//! This code is generated by OTEL Weaver from semantic conventions.
//! DO NOT EDIT MANUALLY.
//!
//! Generated from semantic conventions version: {{ params.semconv_version | default("1.0.0") }}
//! Generation timestamp: {{ params.generation_timestamp | default(now()) }}

use opentelemetry::{
    global,
    sdk::{
        export::trace::stdout,
        propagation::TraceContextPropagator,
        resource::{Resource, ResourceDetector, SdkProvidedResourceDetector},
        trace::{self, RandomIdGenerator, Sampler, TracerProvider},
    },
    trace::{TraceError, Tracer},
    KeyValue,
};
use opentelemetry_otlp::{Protocol, WithExportConfig};
use std::collections::HashMap;
use std::env;
use std::time::Duration;
use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt, EnvFilter, Registry};

use crate::telemetry::errors::{TelemetryError, TelemetryResult};

/// SwarmSH telemetry configuration
#[derive(Debug, Clone)]
pub struct TelemetryConfig {
    /// Service name
    pub service_name: String,
    /// Service version
    pub service_version: String,
    /// Service namespace
    pub service_namespace: String,
    /// OTLP endpoint (if using OTLP exporter)
    pub otlp_endpoint: Option<String>,
    /// Enable stdout exporter for debugging
    pub enable_stdout: bool,
    /// Enable Jaeger exporter
    pub enable_jaeger: bool,
    /// Sampling ratio (0.0 to 1.0)
    pub sampling_ratio: f64,
    /// Resource attributes
    pub resource_attributes: HashMap<String, String>,
    /// Batch timeout
    pub batch_timeout: Duration,
    /// Max export batch size
    pub max_export_batch_size: usize,
    /// Max queue size
    pub max_queue_size: usize,
    /// Enable metrics
    pub enable_metrics: bool,
    /// Enable logs
    pub enable_logs: bool,
}

impl Default for TelemetryConfig {
    fn default() -> Self {
        Self {
            service_name: "swarmsh".to_string(),
            service_version: env!("CARGO_PKG_VERSION").to_string(),
            service_namespace: "{{ params.namespace | default("swarmsh") }}".to_string(),
            otlp_endpoint: env::var("OTEL_EXPORTER_OTLP_ENDPOINT").ok(),
            enable_stdout: env::var("OTEL_EXPORTER_STDOUT").is_ok(),
            enable_jaeger: env::var("OTEL_EXPORTER_JAEGER").is_ok(),
            sampling_ratio: env::var("OTEL_TRACES_SAMPLER_ARG")
                .ok()
                .and_then(|s| s.parse().ok())
                .unwrap_or(1.0),
            resource_attributes: HashMap::new(),
            batch_timeout: Duration::from_secs(5),
            max_export_batch_size: 512,
            max_queue_size: 2048,
            enable_metrics: true,
            enable_logs: true,
        }
    }
}

impl TelemetryConfig {
    /// Create a new configuration with service name
    pub fn new(service_name: impl Into<String>) -> Self {
        Self {
            service_name: service_name.into(),
            ..Default::default()
        }
    }

    /// Set service version
    pub fn with_version(mut self, version: impl Into<String>) -> Self {
        self.service_version = version.into();
        self
    }

    /// Set OTLP endpoint
    pub fn with_otlp_endpoint(mut self, endpoint: impl Into<String>) -> Self {
        self.otlp_endpoint = Some(endpoint.into());
        self
    }

    /// Add resource attribute
    pub fn with_resource_attribute(mut self, key: impl Into<String>, value: impl Into<String>) -> Self {
        self.resource_attributes.insert(key.into(), value.into());
        self
    }

    /// Set sampling ratio
    pub fn with_sampling_ratio(mut self, ratio: f64) -> Self {
        self.sampling_ratio = ratio.clamp(0.0, 1.0);
        self
    }

    /// Build the resource for this configuration
    fn build_resource(&self) -> Resource {
        let mut attributes = vec![
            KeyValue::new("service.name", self.service_name.clone()),
            KeyValue::new("service.version", self.service_version.clone()),
            KeyValue::new("service.namespace", self.service_namespace.clone()),
        ];

        // Add SwarmSH-specific attributes
        {% for convention in ctx %}
          {% if convention.groups %}
            {% for group in convention.groups %}
              {% if group.id == "swarmsh.service" %}
                {% for attr in group.attributes %}
                  {% if attr.requirement_level == "required" and attr.id.startswith("service.") %}
        attributes.push(KeyValue::new("{{ attr.id }}", "{{ attr.examples[0] | default("unknown") }}"));
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}

        // Add custom resource attributes
        for (key, value) in &self.resource_attributes {
            attributes.push(KeyValue::new(key.clone(), value.clone()));
        }

        Resource::new(attributes)
    }
}

/// Initialize OpenTelemetry SDK with SwarmSH configuration
pub fn init_telemetry(config: TelemetryConfig) -> TelemetryResult<()> {
    // Set global error handler
    global::set_error_handler(|error| {
        tracing::error!("OpenTelemetry error: {:?}", error);
    })
    .map_err(|e| TelemetryError::InitializationError(format!("Failed to set error handler: {}", e)))?;

    // Create resource
    let resource = config.build_resource();

    // Create sampler
    let sampler = if config.sampling_ratio >= 1.0 {
        Sampler::AlwaysOn
    } else if config.sampling_ratio <= 0.0 {
        Sampler::AlwaysOff
    } else {
        Sampler::TraceIdRatioBased(config.sampling_ratio)
    };

    // Build trace config
    let trace_config = trace::config()
        .with_sampler(sampler)
        .with_id_generator(RandomIdGenerator::default())
        .with_max_events_per_span(128)
        .with_max_attributes_per_span(128)
        .with_max_links_per_span(128)
        .with_resource(resource);

    // Create tracer provider
    let mut provider_builder = TracerProvider::builder()
        .with_config(trace_config);

    // Add exporters based on configuration
    if config.enable_stdout {
        let stdout_exporter = stdout::new_pipeline()
            .install_simple()
            .map_err(|e| TelemetryError::InitializationError(format!("Failed to create stdout exporter: {}", e)))?;
        provider_builder = provider_builder.with_simple_exporter(stdout_exporter);
    }

    if let Some(endpoint) = &config.otlp_endpoint {
        let otlp_exporter = opentelemetry_otlp::new_exporter()
            .tonic()
            .with_endpoint(endpoint)
            .with_timeout(Duration::from_secs(10))
            .with_protocol(Protocol::Grpc);

        let otlp_tracer = opentelemetry_otlp::new_pipeline()
            .tracing()
            .with_exporter(otlp_exporter)
            .with_trace_config(trace_config.clone())
            .install_batch(opentelemetry::runtime::Tokio)
            .map_err(|e| TelemetryError::InitializationError(format!("Failed to create OTLP exporter: {}", e)))?;
        
        global::set_tracer_provider(otlp_tracer.provider().unwrap().clone());
    }

    if config.enable_jaeger {
        let jaeger_tracer = opentelemetry_jaeger::new_agent_pipeline()
            .with_service_name(&config.service_name)
            .with_trace_config(trace_config.clone())
            .install_batch(opentelemetry::runtime::Tokio)
            .map_err(|e| TelemetryError::InitializationError(format!("Failed to create Jaeger exporter: {}", e)))?;
        
        global::set_tracer_provider(jaeger_tracer.provider().unwrap().clone());
    }

    // Set global propagator
    global::set_text_map_propagator(TraceContextPropagator::new());

    // Initialize tracing subscriber with OpenTelemetry layer
    let telemetry_layer = tracing_opentelemetry::layer();
    
    let subscriber = Registry::default()
        .with(EnvFilter::from_default_env())
        .with(telemetry_layer)
        .with(tracing_subscriber::fmt::layer());

    tracing::subscriber::set_global_default(subscriber)
        .map_err(|e| TelemetryError::InitializationError(format!("Failed to set tracing subscriber: {}", e)))?;

    tracing::info!(
        service.name = %config.service_name,
        service.version = %config.service_version,
        sampling_ratio = %config.sampling_ratio,
        "SwarmSH telemetry initialized"
    );

    Ok(())
}

/// Shutdown telemetry gracefully
pub fn shutdown_telemetry() -> TelemetryResult<()> {
    global::shutdown_tracer_provider();
    tracing::info!("SwarmSH telemetry shutdown complete");
    Ok(())
}

/// Get a tracer for a specific component
pub fn get_tracer(component: &str) -> impl Tracer {
    global::tracer_provider().versioned_tracer(
        component,
        Some(env!("CARGO_PKG_VERSION")),
        Some("https://github.com/swarmsh/swarmsh-v2"),
        None,
    )
}

/// Builder for easy telemetry configuration
pub struct TelemetryBuilder {
    config: TelemetryConfig,
}

impl TelemetryBuilder {
    /// Create a new builder
    pub fn new() -> Self {
        Self {
            config: TelemetryConfig::default(),
        }
    }

    /// Set service name
    pub fn service_name(mut self, name: impl Into<String>) -> Self {
        self.config.service_name = name.into();
        self
    }

    /// Set service version
    pub fn service_version(mut self, version: impl Into<String>) -> Self {
        self.config.service_version = version.into();
        self
    }

    /// Enable OTLP export
    pub fn with_otlp(mut self, endpoint: impl Into<String>) -> Self {
        self.config.otlp_endpoint = Some(endpoint.into());
        self
    }

    /// Enable stdout export for debugging
    pub fn with_stdout(mut self) -> Self {
        self.config.enable_stdout = true;
        self
    }

    /// Enable Jaeger export
    pub fn with_jaeger(mut self) -> Self {
        self.config.enable_jaeger = true;
        self
    }

    /// Set sampling ratio
    pub fn sampling_ratio(mut self, ratio: f64) -> Self {
        self.config.sampling_ratio = ratio;
        self
    }

    /// Add resource attribute
    pub fn resource_attribute(mut self, key: impl Into<String>, value: impl Into<String>) -> Self {
        self.config.resource_attributes.insert(key.into(), value.into());
        self
    }

    /// Build and initialize telemetry
    pub fn init(self) -> TelemetryResult<()> {
        init_telemetry(self.config)
    }
}

/// Convenience macro for initializing telemetry
#[macro_export]
macro_rules! init_swarmsh_telemetry {
    () => {
        $crate::telemetry::sdk_init::TelemetryBuilder::new()
            .service_name(env!("CARGO_PKG_NAME"))
            .service_version(env!("CARGO_PKG_VERSION"))
            .init()
    };
    ($service_name:expr) => {
        $crate::telemetry::sdk_init::TelemetryBuilder::new()
            .service_name($service_name)
            .service_version(env!("CARGO_PKG_VERSION"))
            .init()
    };
    ($service_name:expr, $($key:expr => $value:expr),*) => {
        {
            let mut builder = $crate::telemetry::sdk_init::TelemetryBuilder::new()
                .service_name($service_name)
                .service_version(env!("CARGO_PKG_VERSION"));
            $(
                builder = builder.resource_attribute($key, $value);
            )*
            builder.init()
        }
    };
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_config_default() {
        let config = TelemetryConfig::default();
        assert_eq!(config.service_name, "swarmsh");
        assert_eq!(config.sampling_ratio, 1.0);
        assert!(config.enable_metrics);
        assert!(config.enable_logs);
    }

    #[test]
    fn test_config_builder() {
        let config = TelemetryConfig::new("test-service")
            .with_version("1.2.3")
            .with_sampling_ratio(0.5)
            .with_resource_attribute("env", "test");

        assert_eq!(config.service_name, "test-service");
        assert_eq!(config.service_version, "1.2.3");
        assert_eq!(config.sampling_ratio, 0.5);
        assert_eq!(config.resource_attributes.get("env"), Some(&"test".to_string()));
    }

    #[test]
    fn test_telemetry_builder() {
        let builder = TelemetryBuilder::new()
            .service_name("test")
            .service_version("0.1.0")
            .sampling_ratio(0.1)
            .with_stdout();

        assert_eq!(builder.config.service_name, "test");
        assert_eq!(builder.config.service_version, "0.1.0");
        assert_eq!(builder.config.sampling_ratio, 0.1);
        assert!(builder.config.enable_stdout);
    }

    #[test]
    fn test_resource_building() {
        let config = TelemetryConfig::new("test")
            .with_resource_attribute("deployment.environment", "testing")
            .with_resource_attribute("host.name", "test-host");

        let resource = config.build_resource();
        let attributes: HashMap<String, String> = resource
            .iter()
            .map(|(k, v)| (k.to_string(), v.to_string()))
            .collect();

        assert_eq!(attributes.get("service.name"), Some(&"test".to_string()));
        assert_eq!(attributes.get("deployment.environment"), Some(&"testing".to_string()));
        assert_eq!(attributes.get("host.name"), Some(&"test-host".to_string()));
    }
}