//! Generated telemetry code for SwarmSH v2
//! 
//! This module contains type-safe span builders, attribute constants,
//! metric builders, and validation functions generated from OTEL semantic conventions.
//! 
//! DO NOT EDIT MANUALLY - This code is generated by OTEL Weaver.
//!
//! Generated from semantic conventions version: {{ params.semconv_version | default("1.0.0") }}
//! Generation timestamp: {{ params.generation_timestamp | default(now()) }}
//! Target code coverage: {{ params.target_coverage | default(73) }}%

// Core telemetry modules
pub mod attributes;
pub mod span_builders;
pub mod metrics;
pub mod events;
pub mod validation;
pub mod errors;
pub mod sdk_init;

// Re-export commonly used items
pub use attributes::*;
pub use span_builders::*;
pub use metrics::{MetricsRegistry, METRICS};
pub use events::{EventSeverity, GenericEvent};
pub use validation::{validate_attributes, ValidationResult};
pub use errors::{TelemetryError, TelemetryResult};
pub use sdk_init::{init_telemetry, TelemetryConfig, TelemetryBuilder};

/// Version information for generated code
pub const GENERATED_VERSION: &str = "{{ params.semconv_version | default("1.0.0") }}";
pub const GENERATION_TIMESTAMP: &str = "{{ params.generation_timestamp | default(now()) }}";

/// SwarmSH-specific telemetry domains
pub mod domains {
    {% for convention in ctx %}
      {% if convention.groups %}
        {% for group in convention.groups %}
    /// {{ group.brief }}
    pub const {{ group.id | replace(".", "_") | screaming_snake_case }}: &str = "{{ group.id }}";
        {% endfor %}
      {% endif %}
    {% endfor %}
}

/// Convenience macros for telemetry operations
#[macro_export]
macro_rules! swarmsh_span {
    ($domain:expr, $name:expr) => {
        $crate::generated::span_builder_for($domain, $name)
    };
    ($domain:expr, $name:expr, $($key:expr => $value:expr),*) => {
        {
            let mut builder = $crate::generated::span_builder_for($domain, $name);
            $(
                builder = builder.with_attribute($key, $value);
            )*
            builder
        }
    };
}

#[macro_export]
macro_rules! swarmsh_metric {
    (counter, $name:expr, $value:expr) => {
        $crate::generated::MetricRecorder::new($name, $value as f64)
            .record()
            .unwrap_or_else(|e| tracing::warn!("Failed to record metric: {}", e))
    };
    (counter, $name:expr, $value:expr, $($key:expr => $label:expr),*) => {
        {
            let mut recorder = $crate::generated::MetricRecorder::new($name, $value as f64);
            $(
                recorder = recorder.with_attribute($key, $label);
            )*
            recorder.record()
                .unwrap_or_else(|e| tracing::warn!("Failed to record metric: {}", e))
        }
    };
}

/// Initialize all SwarmSH telemetry components
pub fn init_swarmsh_telemetry() -> TelemetryResult<()> {
    // Initialize with default configuration
    TelemetryBuilder::new()
        .service_name("swarmsh")
        .service_version(env!("CARGO_PKG_VERSION"))
        {% for pattern in params.coordination_patterns | default([]) %}
        .resource_attribute("swarmsh.coordination.pattern.{{ pattern }}", "enabled")
        {% endfor %}
        .init()
}

/// Get telemetry statistics
pub fn telemetry_stats() -> TelemetryStats {
    TelemetryStats {
        total_attributes: ATTRIBUTE_REGISTRY.len(),
        total_metrics: MetricsRegistry::all_metadata().len(),
        domains: vec![
            {% for convention in ctx %}
              {% if convention.groups %}
                {% for group in convention.groups %}
            "{{ group.id }}".to_string(),
                {% endfor %}
              {% endif %}
            {% endfor %}
        ],
        required_attributes: attributes_by_requirement(RequirementLevel::Required).len(),
        deprecated_attributes: deprecated_attributes().len(),
    }
}

/// Telemetry statistics
#[derive(Debug, Clone)]
pub struct TelemetryStats {
    pub total_attributes: usize,
    pub total_metrics: usize,
    pub domains: Vec<String>,
    pub required_attributes: usize,
    pub deprecated_attributes: usize,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generated_version() {
        assert!(!GENERATED_VERSION.is_empty());
        assert!(!GENERATION_TIMESTAMP.is_empty());
    }

    #[test]
    fn test_domain_constants() {
        {% for convention in ctx %}
          {% if convention.groups %}
            {% for group in convention.groups %}
        assert_eq!(domains::{{ group.id | replace(".", "_") | screaming_snake_case }}, "{{ group.id }}");
            {% endfor %}
          {% endif %}
        {% endfor %}
    }

    #[test]
    fn test_telemetry_stats() {
        let stats = telemetry_stats();
        assert!(stats.total_attributes > 0);
        assert!(!stats.domains.is_empty());
    }

    #[test]
    fn test_macro_usage() {
        // Test span macro
        let _span = swarmsh_span!("test.domain", "test_operation");
        
        // Test metric macro
        swarmsh_metric!(counter, "test.counter", 1);
        swarmsh_metric!(counter, "test.counter", 1, "label" => "value");
    }
}